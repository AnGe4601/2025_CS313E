"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my honor, Angela Liu, this 
programming assignment is my own work and I have not provided this code to 
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: yl42556
"""

def row_zigzag_traversal(grid):
    """
    Performs a zigzag traversal of a 2D list, alternating between
    left-to-right and right-to-left traversal for each row from
    top-to-bottom, and returns a list of coordinates (row, column).

    pre:
    - grid is a 2D list representing a 2D matrix.
    - The rows and columns range from 1 to 10 (inclusive).
    - All rows in grid have the same number of columns.

    post:
    - Returns a list of tuples (row, column) representing the
      coordinates of all elements in the specified order.
    """
    row = len(grid)
    column = len(grid[0])
    coordinates = []

    for r in range(row):
        if (r % 2 == 0) or (r == 0):
            for c in range(column):
                coordinates.append((r, c))
        else:
            for c in range(column-1, -1, -1):
                coordinates.append((r, c))
    return coordinates


def column_zigzag_traversal(grid):
    """
    Performs a zigzag traversal of a 2D list, alternating between
    top-to-bottom and bottom-to-top traversal for each column from
    left-to-right, and returns a list of coordinates (row, column).

    pre:
    - grid is a 2D list representing a 2D matrix.
    - The rows and columns range from 1 to 10 (inclusive).
    - All rows in grid have the same number of columns.

    post:
    - Returns a list of tuples (row, column) representing the
      coordinates of all elements in the specified order.
    """
    row = len(grid)
    column = len(grid[0])
    coordinates = []

    for c in range(column):
        if (c % 2 == 0) or (c == 0):
            for r in range(row):
                coordinates.append((r, c))
        else:
            for r in range(row-1, -1, -1):
                coordinates.append((r, c))
    return coordinates


def main_diagonal_traversal(grid):
    """
    Performs a diagonal traversal of a 2D list, iterating from 
    the top-right to the bottom-left in the direction of the 
    main diagonal, and returns a list of coordinates (row, column).

    pre:
    - grid is a 2D list representing a 2D matrix.
    - The rows and columns range from 1 to 10 (inclusive).
    - All rows in grid have the same number of columns.

    post:
    - Returns a list of tuples (row, column) representing the
      coordinates of all elements in the specified order.
    """
    row = len(grid)
    column = len(grid[0])
    coordinates = []

    for c in range(column-1, -1, -1):
        r = 0
        while r < row and c < column:
            coordinates.append((r, c))
            r += 1
            c += 1

    for r in range(1, row, 1):
        c = 0
        while r < row and c < column:
            coordinates.append((r, c))
            r += 1
            c += 1
    return coordinates


def secondary_diagonal_traversal(grid):
    """
    Performs a diagonal traversal of a 2D list, iterating from 
    the top-left to the bottomt-right in the direction of the 
    main diagonal, and returns a list of coordinates (row, column).

    pre:
    - grid is a 2D list representing a 2D matrix.
    - The rows and columns range from 1 to 10 (inclusive).
    - All rows in grid have the same number of columns.

    post:
    - Returns a list of tuples (row, column) representing the
      coordinates of all elements in the specified order.
    """
    row = len(grid)
    column = len(grid[0])
    coordinates = []
    for c in range(0, column, 1):
        r = 0
        while  c > -1 and r < row:
            coordinates.append((r, c))
            c -= 1
            r += 1

    for r in range(1, row, 1):
        c = column-1
        while c > -1 and r < row:
            coordinates.append((r, c))
            c -= 1
            r += 1
    return coordinates


def spiral_traversal(grid):
    """
    Performs a spiral traversal of a 2D list, iterating from 
    the outside rows and columns inward, and returns a list
    of coordinates (row, column).

    pre:
    - grid is a 2D list representing a 2D matrix.
    - The rows and columns range from 1 to 10 (inclusive).
    - All rows in grid have the same number of columns.

    post:
    - Returns a list of tuples (row, column) representing the
      coordinates of all elements in the specified order.
    """
    coordinates = []
    left_bound = 0
    right_bound = len(grid[0])-1
    top_bound = 0
    bottom_bound = len(grid)-1

    while  left_bound <= right_bound and top_bound <= bottom_bound:
        # left to right
        if left_bound <= right_bound and top_bound <= bottom_bound:
            for c in range(left_bound, right_bound+1):
                coordinates.append((top_bound, c))
            top_bound += 1
        # up to bottom
        for r in range(top_bound, bottom_bound+1):
            coordinates.append((r, right_bound))
        right_bound -= 1

        # right to left
        if right_bound >= left_bound and bottom_bound >= top_bound:
            for c in range(right_bound, left_bound-1, -1):
                coordinates.append((bottom_bound, c))
            bottom_bound -= 1
        # bottom to top
        if top_bound <= bottom_bound and right_bound >= left_bound:
            for r in range(bottom_bound, top_bound-1, -1):
                coordinates.append((r, left_bound))
            left_bound += 1
    return coordinates
