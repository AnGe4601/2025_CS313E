"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my honor, Angela Liu, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: yl42556
"""

from abc import ABC, abstractmethod
import random

DAILY_EXPENSE = 60
HAPPINESS_THRESHOLD = 50
MANAGER_BONUS = 1000
TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD = 50
PERM_EMPLOYEE_PERFORMANCE_THRESHOLD = 25
RELATIONSHIP_THRESHOLD = 10
INITIAL_PERFORMANCE = 75
INITIAL_HAPPINESS = 50
PERCENTAGE_MAX = 100
PERCENTAGE_MIN = 0
SALARY_ERROR_MESSAGE = "Salary must be non-negative."

class Employee(ABC):
    """
    Abstract base class representing a generic employee in the system.
    """

    def __init__(self, name, manager, salary, savings):
        self.relationships = {}
        self.savings = savings
        self.is_employed = True
        self.__name = name
        self.__manager = manager
        self.performance = INITIAL_PERFORMANCE
        self.happiness = INITIAL_HAPPINESS
        self.salary = salary
    # Name
    @property
    def name(self):
        """
        Get Employee's name
        """
        return self.__name
    # Manager
    @property
    def manager(self):
        """
        Get employee's manager
        """
        return self.__manager
    # Performance
    @property
    def performance(self):
        """
        Get employee's performance value
        """
        return self.__performance
    @performance.setter
    def performance(self, value):
        if value > PERCENTAGE_MAX:
            self.__performance = PERCENTAGE_MAX
        elif value < PERCENTAGE_MIN:
            self.__performance = PERCENTAGE_MIN
        else:
            self.__performance = value
    # Happiness
    @property
    def happiness(self):
        """
        Get employee's happiness level
        """
        return self.__happiness
    @happiness.setter
    def happiness(self, happiness_value):
        if happiness_value > PERCENTAGE_MAX:
            self.__happiness = PERCENTAGE_MAX
        elif happiness_value < PERCENTAGE_MIN:
            self.__happiness = PERCENTAGE_MIN
        else:
            self.__happiness = happiness_value
    # Salary
    @property
    def salary(self):
        """
        Get employee's salary
        """
        return self.__salary
    @salary.setter
    def salary(self, salary):
        if salary >= 0:
            self.__salary = salary
        else:
            raise ValueError(f"{SALARY_ERROR_MESSAGE}")

    @abstractmethod
    def work(self):
        """
        Simulate one hour of work
        """

    # Interact()
    def interact(self, other):
        """
        Interaction between this employee and other employee
        """
        # first interaction
        if other.name not in self.relationships:
            self.relationships[other.name] = 0
        # check employee's current relationship with other
        if self.relationships[other.name] >= RELATIONSHIP_THRESHOLD:
            self.happiness += 1
        elif self.happiness >= HAPPINESS_THRESHOLD and other.happiness >= HAPPINESS_THRESHOLD:
            self.relationships[other.name] += 1
        else:
            self.relationships[other.name] -= 1
            self.happiness -= 1

    def daily_expense(self):
        """
        Employee's daily spending
        """
        self.happiness -= 1
        self.savings -= DAILY_EXPENSE

    def __str__(self):
        return (f"{self.name}\n\t"
                f"Salary: ${self.salary}\n\t"
                f"Savings: ${self.savings}\n\t"
                f"Happiness: {self.happiness}%\n\t"
                f"Performance: {self.performance}%")

class Manager(Employee):
    """
    A subclass of Employee representing a manager.
    """
    def work(self):
        perforamnce_change = random.randint(-5, 5)
        self.performance += perforamnce_change
        if perforamnce_change <= 0:
            self.happiness -= 1
            other_employees = self.relationships.keys()
            for name in other_employees:
                self.relationships[name] -= 1
        else:
            self.happiness += 1

class TemporaryEmployee(Employee):
    """
    A subclass of Employee representing a temporary employee.
    """
    def work(self):
        performance_change = random.randint(-15, 15)
        self.performance += performance_change
        if performance_change <= 0:
            self.happiness -= 2
        else:
            self.happiness += 1

    def interact(self, other):
        super().interact(other)
        if self.manager == other:
            if (other.happiness > HAPPINESS_THRESHOLD and
                self.performance >= TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD):
                self.savings += MANAGER_BONUS
            # manager's happiness <= threshold
            else:
                self.salary = self.salary // 2
                self.happiness -= 5
                if self.salary <= 0:
                    self.is_employed = False
class PermanentEmployee(Employee):
    """
    A subclass of Employee representing a permanent employee.
    """
    # Work
    def work(self):
        performance_change = random.randint(-10, 10)
        self.performance += performance_change
        if self.performance >= 0:
            self.happiness += 1
    # Interact
    def interact(self, other):
        super().interact(other)
        if  self.manager == other:
            if (other.happiness > HAPPINESS_THRESHOLD and
                self.performance > PERM_EMPLOYEE_PERFORMANCE_THRESHOLD):
                self.savings += MANAGER_BONUS
            elif other.happiness <= HAPPINESS_THRESHOLD:
                self.happiness -= 1
